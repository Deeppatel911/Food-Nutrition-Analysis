dataset<-read.csv("food.csv",header = FALSE)
validation_index<-createDataPartition(dataset,p=0.80,list=FALSE)
validation<-dataset[-validation_index,]
dataset<-dataset[validation_index,]
dataset<-read.csv("food.csv",header = FALSE)
validation_index<-createDataPartition(dataset,p=0.80,list=FALSE)
validation<-dataset[-validation_index,]
dataset<-dataset[validation_index,]
dataset<-read.csv("food.csv",header = FALSE)
validation_index<-createDataPartition(dataset,p=0.80,list=FALSE)
library("caret")
dataset<-read.csv("food.csv",header = FALSE)
validation_index<-createDataPartition(dataset,p=0.80,list=FALSE)
validation_index<-createDataPartition(dataset,p=0.80,list=FALSE)
validation_index<-createDataPartition(dataset,p=0.80,list=FALSE)
library("caret")
dataset<-read.csv("food.csv",header = FALSE)
validation_index<-createDataPartition(dataset,p=0.80,list=FALSE)
validation<-dataset[-validation_index,]
dataset<-dataset[validation_index,]
validation_index<-createDataPartition(dataset,p=0.70,list=FALSE)
validation_index<-createDataPartition(dataset,p=0.10,list=FALSE)
validation_index<-createDataPartition(dataset,p=0.80,list=True)
library("caTools")
install.packages("caTools")
install.packages("ellipse")
library("ellipse")
library("caTools")
dataset<-read.csv("food.csv",header = FALSE)
set.seed(2) #to get the same split everytime
split <- sample.split(dataset$Data.Carbohydrate,SplitRatio = 0.70)
train <- subset(data,split == "TRUE")
test <- subset(data, split == "FALSE")
library("caTools")
dataset<-read.csv("food.csv")
#set.seed(2) #to get the same split every time
split <- sample.split(dataset$Data.Carbohydrate,SplitRatio = 0.70)
train <- subset(data,split == "TRUE")
library("caTools")
dataset<-read.csv("USDA.csv")
which.max(USDA$Sodium)
which.max(dataset$Sodium)
d=dataset$Description[id]
id<-which.max(dataset$Sodium)
d<-dataset$Description[id]
dataset$Description[id]
HighSodium <- subset(dataset, Sodium > 10000)
kable(HighSodium)
table(HighSodium)
id<-which.max(dataset$Sodium,1:500,3:5)
dataset<-read.csv("USDA.csv",1:500,3:5)
dataset<-read.csv("USDA.csv",1:500)
dataset<-read.csv("USDA.csv",1:500,header = FALSE)
#set.seed(2) #to get the same split every time
#split <- sample.split(dataset$Data.Carbohydrate,SplitRatio = 0.70)
#train <- subset(data,split == "TRUE")
#test <- subset(data, split == "FALSE")
fd<-dataset[1:500]
#set.seed(2) #to get the same split every time
#split <- sample.split(dataset$Data.Carbohydrate,SplitRatio = 0.70)
#train <- subset(data,split == "TRUE")
#test <- subset(data, split == "FALSE")
fd<-dataset[1:500,1:10]
fd
fd.head()
dataset<-read.csv("USDA.csv")
fd<-dataset[1:500,1:10]
id<-which.max(fd$Sodium)
dataset$Description[id]
HighSodium <- subset(fd, Sodium > 10000)
table(HighSodium)
dataset<-read.csv("USDA.csv")
fd<-dataset[1:500,1:10]
id<-which.max(fd$Sodium)
dataset$Description[id]
HighSodium <- subset(fd, Sodium > 10000)
table(HighSodium)
dataset<-read.csv("USDA.csv")
fd<-dataset[1:1000,1:10]
id<-which.max(fd$Sodium)
dataset$Description[id]
HighSodium <- subset(fd, Sodium > 10000)
table(HighSodium)
dataset<-read.csv("USDA.csv")
fd<-dataset[1:1000,1:10]
id<-which.max(fd$Sodium)
clear()
dataset<-read.csv("USDA.csv")
fd<-dataset[1:1000,1:10]
id<-which.max(fd$Sodium)
dataset$Description[id]
HighSodium <- subset(fd, Sodium > 10000)
table(HighSodium)
dataset<-read.csv("USDA.csv")
fd<-dataset[1:1000,1:8]
id<-which.max(fd$Sodium)
dataset$Description[id]
id<-which.max(fd$Sugar)
dataset$Description[id]
id<-which.max(fd$Protein)
dataset$Description[id]
HighSodium <- subset(fd, Protien > 20)
HighSodium <- subset(fd, Protein > 20)
table(HighSodium)
HighProtein <- subset(fd, Protein > 25)
table(HighProtein)
HighProtein <- subset(fd, Protein > 30)
table(HighProtein)
summary(fd$Protein)
HighProtein <- subset(fd, Protein > 60)
table(HighProtein)
dataset<-read.csv("USDA.csv")
fd<-dataset[1:1000,1:8]
cal<-which.max(fd$Calories)
dataset$Description[cal]
summary(fd$Calories)
prtn<-which.max(fd$Protein)
dataset$Description[prtn]
summary(fd$Protein)
tf<-which.max(fd$TotalFat)
dataset$Description[tf]
summary(fd$TotalFat)
carb<-which.max(fd$Carbohydrate)
dataset$Description[carb]
summary(fd$Carbohydrate)
sg<-which.max(fd$Sugar)
dataset$Description[sg]
summary(fd$Sugar)
chol<-which.max(fd$Cholestrol)
dataset$Description[chol]
summary(fd$chol)
chol<-which.max(fd$Cholestrol)
dataset$Description[chol]
chol<-which.max(dataset$Cholestrol)
dataset$Description[chol]
chol<-which.max(fd$Cholestrol)
dataset$Description[chol]
chol<-which.max(fd$Cholestrol)
dataset$Description[chol]
summary(fd$Cholesterol)
chol<-which.max(fd$Cholestrol)
dataset$Description[chol]
summary(fd$Cholesterol)
cal<-which.max(fd$Calories)
dataset$Description[cal]
subset(fd,fd$Calories==cal)
dataset<-read.csv("USDA.csv")
fd<-dataset[1:1000,1:8]
cal<-which.max(fd$Calories)
dataset$Description[cal]
summary(fd$Calories)
prtn<-which.max(fd$Protein)
dataset$Description[prtn]
summary(fd$Protein)
tf<-which.max(fd$TotalFat)
dataset$Description[tf]
summary(fd$TotalFat)
carb<-which.max(fd$Carbohydrate)
dataset$Description[carb]
summary(fd$Carbohydrate)
sg<-which.max(fd$Sugar)
dataset$Description[sg]
summary(fd$Sugar)
chol<-which.max(fd$Cholestrol)
dataset$Description[chol]
summary(fd$Cholesterol)
chol<-which.max(fd$Cholesterol)
dataset$Description[chol]
summary(fd$Cholesterol)
cal<-max(fd$Calories)
dataset$Description[cal]
summary(fd$Calories)
cal<-which.max(fd$Calories)
dataset$Description[cal]
summary(fd$Calories)
dataset<-read.csv("USDA.csv")
fd<-dataset[1:1000,1:8]
cal<-which.max(fd$Calories)
dataset$Description[cal]
summary(fd$Calories)
hist(fd$Calories)
sg<-which.max(fd$Sugar)
dataset$Description[sg]
summary(fd$Sugar)
boxplot(fd$Sugar)
boxplot(fd$Sugar,ylab="Sugar(mg)")
prtn<-which.max(fd$Protein)
dataset$Description[prtn]
summary(fd$Protein)
tf<-which.max(fd$TotalFat)
dataset$Description[tf]
summary(fd$TotalFat)
plot(x=fd$TotalFat,y=fd$Protein,xlab="Fat",y="Protein",main="Fat vs Protein")
plot(x=fd$TotalFat,y=fd$Protein,xlab="Fat",ylab="Protein",main="Fat vs Protein")
plot(x=fd$TotalProtein,y=fd$TotalFat,xlab="Protein",ylab="Fat",main="Fat vs Protein")
plot(x=fd$TotalProtein,y=fd$TotalFat,xlab="Protein",ylab="Fat",main="Fat vs Protein")
plot(x=fd$Protein,y=fd$TotalFat,xlab="Protein",ylab="Fat",main="Fat vs Protein")
dataset<-read.csv("USDA.csv")
fd<-dataset[1:1000,1:8]
cal<-which.max(fd$Calories)
dataset$Description[cal]
tfmx<-which.max(fd$TotalFat)
dataset$Description[tfmx]
thmi<-which.min(fd$TotalFat)
dataset$Description[tfmi]
tfi<-which.min(fd$TotalFat)
dataset$Description[tfmi]
tfmi<-which.min(fd$TotalFat)
dataset$Description[tfmi]
summary(fd$TotalFat)
cal<-which.max(fd$Calories)
dataset$Description[cal]
summary(fd$Calories)
subset(fd,fd$Protein>50)
subset(fd$Description,fd$Protein>=50)
summary(fd$TotalFat)
subset(fd$Description,fd$Protein<=50)
subset(fd$Description,fd$Protein>=50 && fd$Totalfat<=70)
subset(fd$Description,fd$Protein>=50 && fd$Totalfat>=70)
subset(fd$Description,fd$Protein>=50 && fd$Sugar<=90)
subset(fd$Description,fd$Sugar<=90)
subset(fd$Description,fd$Protein>=50 & fd$Sugar<=90)
subset(fd$Description,fd$Protein>=50 & fd$Sugar<=90  & fd$Carbohydrate>=310)
subset(fd$Description,fd$Protein>=50 & fd$Sugar<=90  & fd$Carbohydrate<=310)
subset(fd$Description,fd$Protein<=50 & fd$Sugar<=90  & fd$Carbohydrate<=310)
>
subset(fd$Description,fd$Protein>=50 & fd$Sugar<=90  & fd$Carbohydrate<=310)
subset(fd$Description,fd$Protein<=50 & fd$Sugar<=90  & fd$Carbohydrate<=310)
dataset<-read.csv("USDA.csv")
fd<-dataset[1:1000,1:9]
cal<-which.max(fd$Calories)
dataset$Description[cal]
summary(fd$Calories)
hist(fd$Calories)
subset(fd$Description,fd$Protein<=50 & fd$Sugar<=90  & fd$Carbohydrate<=310 & fd$Sodium<=2.3)
subset(fd$Description,fd$Protein<=50 & fd$Sugar<=90  & fd$Carbohydrate<=310 & fd$Sodium<=2.3 & fd$TotalFat<=70)
subset(fd$Description,fd$Protein=50 & fd$Sugar=90 & fd$Carbohydrate=310 & fd$Sodium=2.3)
subset(fd$Description,fd$Protein==50 & fd$Sugar==90 & fd$Carbohydrate==310 & fd$Sodium==2.3)
subset(fd$Description,fd$Protein<=50 & fd$Sugar<=90  & fd$Carbohydrate<=310 & fd$Sodium<=2.3)
subset(fd$Description,fd$Protein>=50)
#importing the dataset
dataset<-read.csv("USDA.csv")
#selecting data upto 1000 entries and 9 columns as the actual data is too large
fd<-dataset[1:1000,1:9]
subset(fd$Description,fd$Protein>=50)
subset(fd$Description,fd$Protein<=50)
subset(fd$Description,fd$Description<="Chicken")
subset(fd$Description,fd$Protein<=50)
subset(fd$Description,fd$Protein<=25)
summary(fd$Protein)
subset(fd$Description,fd$Protein>=15 & fd$Protein<=50)
subset(fd$Description,fd$Protein>=15 & fd$Protein<=30)
subset(fd$Description,fd$Protein>=12 & fd$Protein<=25)
summary(fd$Carbohydrate)
summary(fd$Calories)  #summary of calories i.e what is the max, min value of Calories found avg,mode,etc
summary(fd$Sugar)
summary(dataset$Carbohydrate)
#importing the dataset
dataset<-read.csv("USDA.csv")
#determining the row/entry which has the max calories
cal<-which.max(dataset$Calories)
dataset$Description[cal]  #determining the name of the item with the given row
summary(dataset$Calories)  #summary of calories i.e what is the max, min value of Calories found, avg,mode,etc
hist(dataset$Calories) #shows the frequency distribution of items with their calorie values
prtn<-which.max(dataset$Protein)
dataset$Description[prtn]
summary(dataset$Protein)
subset(dataset$Description,dataset$Protein>=12 & dataset$Protein<=25)
#importing the dataset
dataset<-read.csv("USDA.csv")
#selecting data upto 1000 entries and 9 columns as the actual data is too large
fd<-dataset[1:1000,1:9]
#determining the row/entry which has the max calories
cal<-which.max(fd$Calories)
dataset$Description[cal]  #determining the name of the item with the given row
summary(fd$Calories)  #summary of calories i.e what is the max, min value of Calories found, avg,mode,etc
hist(fd$Calories) #shows the frequency distribution of items with their calorie values
prtn<-which.max(fd$Protein)
dataset$Description[prtn]
summary(fd$Protein)
subset(fd$Description,fd$Protein>=12 & fd$Protein<=25)
prtn<-which.max(fd$Protein)
dataset$Description[prtn]
summary(fd$Protein)
subset(fd$Description,fd$Protein>=12 & fd$Protein<=25)
tfmx<-which.max(fd$TotalFat)
dataset$Description[tfmx]
tfmi<-which.min(fd$TotalFat)
dataset$Description[tfmi]
summary(fd$TotalFat)
plot(x=fd$Protein,y=fd$TotalFat,xlab="Protein",ylab="Fat",main="Fat vs Protein")
hist(fd$Calories) #shows the frequency distribution of items with their calorie values
subset(fd$Description,fd$Calories>=200 & fd$Calories<600)
subset(fd$Description,fd$Calories<500)
subset(fd$Description,fd$Calories>=200 & fd$Calories<500)
tfmx<-which.max(fd$TotalFat)
dataset$Description[tfmx]
tfmi<-which.min(fd$TotalFat)
dataset$Description[tfmi]
summary(fd$TotalFat)
plot(x=fd$Protein,y=fd$TotalFat,xlab="Protein",ylab="Fat",main="Fat vs Protein")
summary(fd$Carbohydrate)
summary(dataset$Carbohydrate)
#food items based on the recommended daily intake of nutrients
subset(fd$Description,sum(fd$Protein)<=50 & sum(fd$Sugar)<=90  & sum(fd$Carbohydrate)<=130 & sum(fd$Sodium)<=2.3)
#food items based on the recommended daily intake of nutrients
subset(fd$Description,sum(fd$Protein<=50 & sum(fd$Sugar)<=90  & sum(fd$Carbohydrate)<=130 & fd$Sodium<=2.3))
#food items based on the recommended daily intake of nutrients
subset(fd$Description,sum(fd$Protein<=50 & (sum(fd$Sugar))<=90  & (sum(fd$Carbohydrate))<=130 & fd$Sodium<=2.3))
#food items based on the recommended daily intake of nutrients
subset(fd$Description,fd$Protein<=50 & fd$Sugar<=90  & fd$Carbohydrate<=130 & fd$Sodium<=2.3)
subset(fd$Description,fd$Carbohydrate>=15 & fd$Carbohydrate<=65)
#food items based on the recommended daily intake of nutrients
subset(fd$Description,sum(fd$Calories)<2200)
#food items based on the recommended daily intake of nutrients
sum(fd$Calories)
#food items based on the recommended daily intake of nutrients
subset(fd$Description,sum(fd$Calories)<2200)
boxplot(fd$Sugar,ylab="Sugar(mg)")
#food items based on the recommended daily intake of nutrients
sum(fd$Calories)
summary(fd$Cholesterol)
dataset$Description[chol]
summary(fd$Cholesterol)
chol<-which.max(fd$Cholesterol)
dataset$Description[chol]
subset(fd$Description,fd$Cholesterol>=175 & fd$Cholesterol<=485)
fd$Sugar[fd$Description=="Cereal"]
fd$Sugar[grep("Cereal")]
fd$Sugar[grep("Cereal",fd$Description)]
chol<-which.max(fd$Cholesterol)
dataset$Description[chol]
plot(fd$Sugar)
boxplot(fd$Sugar,ylab="Sugar(mg)") #distribution of food items based on their sugar value
library(NutrienTrackeR)
library(ggplot2)
daily_intake <- dietBalance(my_daily_food = sample_diet_USDA, food_database = "USDA",  age = 27, gender = "female")
#selecting data upto 1000 entries and 9 columns as the actual data is too large
fd<-dataset[1:1000,1:10]
subset(fd$Description,fd$Calories>=200 & fd$Calories<500) #sources which gives good amount of calories
#food items based on the recommended daily intake of nutrients
subset(fd$Description,fd$Protein<=50 & fd$Sugar<=90  & fd$Carbohydrate<=130 & fd$Sodium<=2.3)
nutrientPiePlot(daily_intake, nutrient_name = "Iron")
nutrientPiePlot(daily_intake, nutrient_name = "Iron, Fe")
nutrientPiePlot(daily_intake, nutrient_name = "Iron, Fe(fe)")
nutrientPiePlot(daily_intake, nutrient_name = "Iron, Fe(mg)")
nutrientPiePlot(daily_intake, nutrient_name = "Iron, Fe (mg)")
#The function dietBalance() calculates the daily nutrient intake of an individual and compares it with the NIH recommendations (recommended dietary allowances (RDA)
daily_intake <- dietBalance(my_daily_food = sample_diet_USDA, food_database = "USDA",  age = 27, gender = "female")
#importing the dataset and creating the dataframe
dataset<-read.csv("USDA.csv")
#selecting data upto 1000 entries and 9 columns as the actual data is too large
fd<-dataset[1:1000,1:10]
summary(fd$Calories)  #summary of calories i.e what is the max, min value of Calories found, avg,mode,etc
library(NutrienTrackeR)
library(NutrienTrackeR)
library(ggplot2)
#importing the dataset and creating the dataframe
dataset<-read.csv("USDA.csv")
#selecting data with 1000 entries and 9 columns as the actual data is too large
fd<-dataset[1:1000,1:10]
library(NutrienTrackeR)
library(ggplot2)
#importing the dataset and creating the dataframe
dataset<-read.csv("USDA.csv")
library(NutrienTrackeR)
library(ggplot2)
#importing the dataset and creating the dataframe
dataset<-read.csv("USDA.csv")
#selecting data with 1000 entries and 9 columns as the actual data is too large
fd<-dataset[1:1000,1:10]
#determining the row/entry which has the max calories
cal<-which.max(fd$Calories)
fd$Description[cal]  #determining the name of the item with the given row
summary(fd$Calories)  #summary of calories i.e what is the max, min value of Calories found, avg,mode,etc
hist(fd$Calories) #shows the frequency distribution of items with their calorie values
subset(fd$Description,fd$Calories>=200 & fd$Calories<500) #sources which gives good amount of calories
prtn<-which.max(fd$Protein)
fd$Description[prtn]
summary(fd$Protein)
subset(fd$Description,fd$Protein>=12 & fd$Protein<=25) #good source of proteins
tfmx<-which.max(fd$TotalFat)
fd$Description[tfmx] #food item with max fat
tfmi<-which.min(fd$TotalFat)
fd$Description[tfmi] #food item with min fat
summary(fd$TotalFat)
plot(x=fd$Protein,y=fd$TotalFat,xlab="Protein",ylab="Fat",main="Fat vs Protein")
carb<-which.max(fd$Carbohydrate)
fd$Description[carb]
summary(fd$Carbohydrate)
subset(fd$Description,fd$Carbohydrate>=15 & fd$Carbohydrate<=65) #good source of carbohydrates
sg<-which.max(fd$Sugar)
fd$Description[sg]
summary(fd$Sugar)
boxplot(fd$Sugar,ylab="Sugar(mg)") #distribution of food items based on their sugar value
chol<-which.max(fd$Cholesterol)
fd$Description[chol]
summary(fd$Cholesterol)
subset(fd$Description,fd$Cholesterol>=175 & fd$Cholesterol<=485) #high cholesterol food to avoid
#food items based on the recommended daily intake of nutrients
subset(fd$Description,fd$Protein<=50 & fd$Sugar<=90  & fd$Carbohydrate<=130 & fd$Sodium<=2.3)
#The function dietBalance() calculates the daily nutrient intake of an individual and compares it with the NIH recommendations (recommended dietary allowances (RDA)
daily_intake <- dietBalance(my_daily_food = sample_diet_USDA, food_database = "USDA",  age = 27, gender = "female")
#The function nutrientPiePlot() generates a pie-chart showing the relative contribution of each food to the total intake of a given nutrient.
nutrientPiePlot(daily_intake, nutrient_name = "Iron, Fe (mg)")
#importing the dataset and creating the dataframe
dataset<-read.csv("USDA.csv")
#selecting data with 1000 entries and 9 columns as the actual data is too large
fd<-dataset[1:1000,1:10]
#selecting data with 1000 entries and 9 columns as the actual data is too large
fd<-dataset[1:1000,1:10]
#determining the row/entry which has the max calories
cal<-which.max(fd$Calories)
fd$Description[cal]  #determining the name of the item with the given row
summary(fd$Calories)  #summary of calories i.e what is the max, min value of Calories found, avg,mode,etc
hist(fd$Calories) #shows the frequency distribution of items with their calorie values
subset(fd$Description,fd$Calories>=200 & fd$Calories<500) #sources which gives good amount of calories
prtn<-which.max(fd$Protein)
fd$Description[prtn]
summary(fd$Protein)
subset(fd$Description,fd$Protein>=12 & fd$Protein<=25) #good source of proteins
tfmx<-which.max(fd$TotalFat)
fd$Description[tfmx] #food item with max fat
tfmi<-which.min(fd$TotalFat)
fd$Description[tfmi] #food item with min fat
summary(fd$TotalFat)
plot(x=fd$Protein,y=fd$TotalFat,xlab="Protein",ylab="Fat",main="Fat vs Protein")
carb<-which.max(fd$Carbohydrate)
fd$Description[carb]
summary(fd$Carbohydrate)
subset(fd$Description,fd$Carbohydrate>=15 & fd$Carbohydrate<=65) #good source of carbohydrates
sg<-which.max(fd$Sugar)
fd$Description[sg]
summary(fd$Sugar)
chol<-which.max(fd$Cholesterol)
fd$Description[chol]
summary(fd$Cholesterol)
subset(fd$Description,fd$Cholesterol>=175 & fd$Cholesterol<=485) #high cholesterol food to avoid
#food items based on the recommended daily intake of nutrients
subset(fd$Description,fd$Protein<=50 & fd$Sugar<=90  & fd$Carbohydrate<=130 & fd$Sodium<=2.3)
#food items based on the recommended daily intake of nutrients
subset(fd$Description,fd$Protein<=50 & fd$Sugar<=90  & fd$Carbohydrate<=130 & fd$Sodium<=2.3)
#The function dietBalance() calculates the daily nutrient intake of an individual and compares it with the NIH recommendations (recommended dietary allowances (RDA)
daily_intake <- dietBalance(my_daily_food = sample_diet_USDA, food_database = "USDA",  age = 27, gender = "female")
#The function dietBalance() calculates the daily nutrient intake of an individual and compares it with the NIH recommendations (recommended dietary allowances (RDA)
daily_intake <- dietBalance(my_daily_food = sample_diet_USDA, food_database = "USDA",  age = 27, gender = "female")
library(NutrienTrackeR)
library(ggplot2)
#The function dietBalance() calculates the daily nutrient intake of an individual and compares it with the NIH recommendations (recommended dietary allowances (RDA)
daily_intake <- dietBalance(my_daily_food = sample_diet_USDA, food_database = "USDA",  age = 27, gender = "female")
#The function nutrientPiePlot() generates a pie-chart showing the relative contribution of each food to the total intake of a given nutrient.
nutrientPiePlot(daily_intake, nutrient_name = "Iron, Fe (mg)")
